#1 (Resolvido pelo professor): Criar um projeto de uma aplica√ß√£o Web utilizando o
framework Express com TypeScript. √â necess√°rio instalar e usar os pacotes dotenv e
nodemon, al√©m de configurar no arquivo package.json tr√™s scripts: start, que deve executar
a aplica√ß√£o em ambiente de desenvolvimento utilizando o nodemon; deploy, que deve gerar
a vers√£o transpilada do c√≥digo utilizando o compilador do TypeScript, armazenando os
arquivos no diret√≥rio build; e start:prod, que deve executar a vers√£o transpilada da aplica√ß√£o
localizada no diret√≥rio build, simulando assim o ambiente de produ√ß√£o. ‚úÖüî•üî•‚úÖ‚úÖ‚úÖ


#2 (Resolvido pelo professor): Desenvolver a p√°gina About, que dever√° apresentar
informa√ß√µes b√°sicas e gerais sobre o jogo Space Shooter (pode ser um texto simples,
obtidas de qualquer fonte dispon√≠vel na Internet). Essa p√°gina dever√° ter uma ou mais
imagens, que dever√£o ser disponibilizadas no diret√≥rio /public/img da aplica√ß√£o. O
middleware de arquivos est√°ticos do Express dever√° ser usado para mostrar as imagens
na aplica√ß√£o. A p√°gina Sobre dever√° estar acess√≠vel na rota /about e utilizar a engine de
templates Handlebars para sua renderiza√ß√£o.üî•‚úÖ‚úÖ‚úÖ

#3 (Resolvido pelo professor): Criar um arquivo .env (n√£o version√°vel) e uma c√≥pia desse
arquivo .env.example (version√°vel). Criar um mecanismo de valida√ß√£o das vari√°veis de
ambiente definidas no arquivo .env. Esse mecanismo dever√° ser baseado no pacode
envalid, apresentado durante as aulas. O c√≥digo de valida√ß√£o dever√° ser implementado no
arquivo src/utils/validateEnv.ts, que dever√° ser importado em src/index.ts para validar as
vari√°veis de ambiente.üî•‚úÖ‚úÖ‚úÖ

#4 (Resolvido pelo professor): Implementar um middleware chamado logger, localizado no
diret√≥rio src/middlewares, cuja fun√ß√£o √© registrar os dados de acesso dos usu√°rios em um
arquivo de log. O caminho para esse arquivo deve ser definido por meio de uma vari√°vel
chamada LOGS_PATH, declarada no arquivo .env, sendo obrigat√≥ria a valida√ß√£o dessa
vari√°vel no arquivo src/utils/validateEnv.ts. O middleware dever√° receber um par√¢metro
que define o formato do log, podendo ser simples ou completo. No formato simples,
dever√£o ser registrados a hora do acesso, a URL acessada na aplica√ß√£o e o m√©todo HTTP
utilizado. No formato completo, al√©m desses dados, tamb√©m devem ser inclu√≠dos a vers√£o do
protocolo HTTP e o User-Agent do navegador utilizado pelo cliente.‚úÖ‚úÖ‚úÖ

#5 (Resolvido pelo professor): Colocar TODAS as rotas da aplica√ß√£o em um arquivo
separado, no path src/router/router.ts, seguindo as instru√ß√µes dos slides.‚úÖ‚úÖ‚úÖ

#6 (N√ÉO resolvido pelo professor): Desenvolver uma rota /lorem que receba como
par√¢metro um valor inteiro qualquer. Como resultado, a rota dever√° retornar um conte√∫do
HTML contendo uma quantidade de par√°grafos igual ao valor informado. Dica: use o pacote
lorem-ipsum.‚úÖ‚úÖ‚úÖ

#7 (Resolvido pelo professor): Implementar as p√°ginas das rotas /hb1, /hb2 e /hb3
mostradas nos slides. O conte√∫do dessas p√°ginas n√£o precisa ser exatamente igual ao dos
slides, mas a p√°gina /hb1 precisa imprimir o conte√∫do de uma vari√°vel usando o Handlebars,
e as p√°ginas /hb2 e /hb3 precisam usar os comandos #if e #each do Handlebars,
respectivamente.‚úÖ‚úÖ‚úÖ

#8 (Resolvido pelo professor): Criar um helper para a engine de views Handlebars que
recebe um vetor de tecnologias (com o mesmo formato do vetor technologies abaixo) e ent√£o
retorna o c√≥digo HTML contendo uma lista n√£o ordenada com as tecnologias do vetor onde o
valor de poweredByNodejs seja true. Crie uma p√°gina com a rota /hb4 e use esse helper na
p√°gina.‚úÖ‚úÖ‚úÖ

#9 (Resolvido pelo professor): Mover a aplica√ß√£o para o MVC, seguindo os passos
apresentados nos slides. Criar um controlador main com todas as rotas desenvolvidas nos
exerc√≠cios anteriores. Note que a aplica√ß√£o ainda n√£o tem modelos e servi√ßos, que somente
ser√£o criados nos pr√≥ximos exerc√≠cios.‚úÖ‚úÖ‚úÖ

#10 (Resolvido pelo professor): Criar um layout Handlebars que contenha todo o conte√∫do
comum a todas as views da aplica√ß√£o, incluindo as tags <html>, <head>, <body>, entre
outras estruturas padr√£o de uma p√°gina HTML. Esse layout dever√° ser utilizado de forma
que cada view da aplica√ß√£o contenha apenas o conte√∫do espec√≠fico da p√°gina que ela
precisa renderizar, aproveitando assim a estrutura comum definida no layout.‚úÖ‚úÖ‚úÖ

#11 (Resolvido pelo professor): Configurar o SASS na sua aplica√ß√£o seguindo as
instru√ß√µes dos slides, e adicione uma cor no texto da view /hb1 usando a t√©cnica
apresentada.‚úÖ‚úÖ‚úÖ

#12 (Resolvido pelo professor): Instalar e configurar o ORM Prisma na aplica√ß√£o. Ap√≥s
isso, criar os modelos Major, User e GameSession. Rode a migration para que as tabelas
sejam criadas no banco de dados.‚úÖ‚úÖ‚úÖ

#13 (Resolvido parcialmente pelo professor): Criar os CRUDs para os modelos Major e
User. Cada CRUD dever√° ter um controlador, um service, e um arquivo com os
tipos/interfaces usados. Fazer a valida√ß√£o de todos os dados dos formul√°rios usando o
pacote Joi.

#14 (N√ÉO resolvido pelo professor): As p√°ginas que exibem as listagens de Majors e
Users, bem como as p√°ginas de detalhes de um Major ou User espec√≠fico, dever√£o
disponibilizar uma op√ß√£o para excluir os respectivos registros. Ao selecionar essa op√ß√£o,
uma janela modal dever√° ser exibida solicitando a confirma√ß√£o da opera√ß√£o de dele√ß√£o. Se o
usu√°rio optar por n√£o confirmar, a janela modal ser√° simplesmente fechada e nenhuma a√ß√£o
ser√° executada. Por outro lado, caso o usu√°rio confirme a opera√ß√£o, dever√° ser disparada
uma requisi√ß√£o Ajax, utilizando o m√©todo POST, para o servidor, solicitando a exclus√£o do
item correspondente.

#15 (N√ÉO resolvido pelo professor): Criar a p√°gina de cadastro onde os usu√°rios
poder√£o criar suas contas para usar a aplica√ß√£o. Os dados necess√°rios para o cadastro do
usu√°rio s√£o: nome completo, email, senha, repetir senha, e curso (dever√° ser mostrado um
dropdown com os cursos cadastrados no sistema). Ap√≥s um usu√°rio se cadastrar, sua senha dever√° ser criptografada usando as diretrizes apresenta das nos slides.

#16 (N√ÉO resolvido pelo professor): Adicionar o jogo implementado no primeiro trabalho
pr√°tico na p√°gina principal da aplica√ß√£o, na rota / (raiz). Note que apenas usu√°rios logados
dever√£o ter acesso ao jogo. Quando um usu√°rio estiver jogando o jogo e se deparar um com
Game Over, sua aplica√ß√£o dever√° fazer uma requisi√ß√£o Ajax ao servidor para salvar os
scores dos usu√°rios na tabela game_sessions.

#17 (N√ÉO resolvido pelo professor): Criar uma p√°gina Ranking (rota /ranking) cotendo uma
tabela com a pontua√ß√£o dos 10 usu√°rios distintos que mais pontuaram em seu jogo. A ordem
dos usu√°rios na tabela deve ser em ordem descrescente de acordo com a pontua√ß√£o obtida
por cada usu√°rio.

#18 (Resolvido parcialmente pelo professor): Desenvolver um middleware que utiliza
vari√°veis de sess√£o para impedir que usu√°rios n√£o autenticados acessem rotas restritas, ou
seja, rotas que s√£o permitidas apenas para usu√°rios que estejam devidamente logados na
aplica√ß√£o. Caso o usu√°rio n√£o esteja autenticado, o middleware dever√° bloquear o acesso e
redirecion√°-lo para a p√°gina de login.

#19 (Resolvido parcialmente pelo professor): Criar uma Navbar para a aplica√ß√£o, usando
o componente Navbar do Bootstrap. A lista de atalhos exibida na Navbar depende se o
usu√°rio est√° logado ou n√£o na aplica√ß√£o. Quando o usu√°rio n√£o est√° logado, s√£o exibidos os
atalhos Sobre, que direciona para a rota /about, Login, que leva para a p√°gina de
autentica√ß√£o, e Criar Conta, que leva para a p√°gina de cadastro. Quando o usu√°rio est√°
logado, os atalhos exibidos na Navbar s√£o Sobre, que tamb√©m direciona para a rota /about,
Jogar, que leva para a p√°gina onde o usu√°rio pode iniciar uma partida do jogo, e Ranking,
que direciona para a p√°gina com a lista das melhores pontua√ß√µes. Al√©m disso, quando o
usu√°rio est√° logado, o canto direito da Navbar exibe seu nome, que, ao ser clicado, abre um
menu suspenso (Dropdown do Bootstrap) contendo as op√ß√µes Efetuar logout, Alterar
dados cadastrais e Alterar senha. A op√ß√£o Alterar dados cadastrais direciona para uma
p√°gina onde o usu√°rio pode atualizar seus dados pessoais, enquanto a op√ß√£o Alterar senha
leva para uma p√°gina que permite modificar a senha, a qual deve conter tr√™s campos: senha
atual, nova senha e repetir nova senha. A altera√ß√£o da senha s√≥ ser√° permitida se o usu√°rio
informar corretamente a senha atual e se os campos de nova senha e repetir nova senha
estiverem preenchidos com o mesmo valor.